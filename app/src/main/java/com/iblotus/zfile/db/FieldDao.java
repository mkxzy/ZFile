package com.iblotus.zfile.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.iblotus.zfile.model.Field;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FIELD".
*/
public class FieldDao extends AbstractDao<Field, Long> {

    public static final String TABLENAME = "FIELD";

    /**
     * Properties of entity Field.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DbId = new Property(1, Long.class, "dbId", false, "DB_ID");
        public final static Property Idx = new Property(2, Integer.class, "idx", false, "IDX");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
    }

    private Query<Field> db_FieldsQuery;

    public FieldDao(DaoConfig config) {
        super(config);
    }
    
    public FieldDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FIELD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DB_ID\" INTEGER," + // 1: dbId
                "\"IDX\" INTEGER," + // 2: idx
                "\"NAME\" TEXT," + // 3: name
                "\"TYPE\" TEXT);"); // 4: type
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_FIELD_DB_ID_NAME ON \"FIELD\"" +
                " (\"DB_ID\" ASC,\"NAME\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FIELD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Field entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long dbId = entity.getDbId();
        if (dbId != null) {
            stmt.bindLong(2, dbId);
        }
 
        Integer idx = entity.getIdx();
        if (idx != null) {
            stmt.bindLong(3, idx);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Field entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long dbId = entity.getDbId();
        if (dbId != null) {
            stmt.bindLong(2, dbId);
        }
 
        Integer idx = entity.getIdx();
        if (idx != null) {
            stmt.bindLong(3, idx);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Field readEntity(Cursor cursor, int offset) {
        Field entity = new Field( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // dbId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // idx
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Field entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDbId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setIdx(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Field entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Field entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Field entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "fields" to-many relationship of Db. */
    public List<Field> _queryDb_Fields(Long dbId) {
        synchronized (this) {
            if (db_FieldsQuery == null) {
                QueryBuilder<Field> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.DbId.eq(null));
                db_FieldsQuery = queryBuilder.build();
            }
        }
        Query<Field> query = db_FieldsQuery.forCurrentThread();
        query.setParameter(0, dbId);
        return query.list();
    }

}
